rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isCollaborator(deckId) {
      let deck = get(/databases/$(database)/documents/decks/$(deckId));
      return isAuthenticated() && 
        deck != null && 
        request.auth.uid in deck.data.collaborators;
    }

    function isDeckOwner(deckId) {
      let deck = get(/databases/$(database)/documents/decks/$(deckId));
      return isAuthenticated() && 
        deck != null && 
        request.auth.uid == deck.data.userId;
    }

    function isDeckPublic(deckId) {
      let deck = get(/databases/$(database)/documents/decks/$(deckId));
      return deck != null && deck.data.visibility == 'public';
    }

    function canAccessDeck(deckId) {
      return isDeckPublic(deckId) || isDeckOwner(deckId) || isCollaborator(deckId);
    }

    // Regras para Users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update, delete: if isOwner(userId);
    }

    // Regras para Decks
    match /decks/{deckId} {
      allow read: if isAuthenticated() && (
        resource.data.visibility == 'public' || 
        isOwner(resource.data.userId) || 
        request.auth.uid in resource.data.collaborators
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Regras para Flashcards
    match /flashcards/{cardId} {
      allow read: if isAuthenticated() && canAccessDeck(resource.data.deckId);
      allow create: if isAuthenticated() && isDeckOwner(request.resource.data.deckId);
      allow update, delete: if isAuthenticated() && isDeckOwner(resource.data.deckId);
    }

    // Regras para Reviews
    match /reviews/{reviewId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Regras para Sessions
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
