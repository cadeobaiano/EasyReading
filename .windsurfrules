Store the following information in your memory. I want you to use these recommended technologies for our mobile flashcards app with AI integration. Plan the app's architecture accordingly and communicate exclusively in English.

For the mobile frontend, use Flutter as the primary framework to develop native applications for both Android and iOS from a single codebase. This approach provides high performance, highly customizable interfaces, and smooth animations and transitions, which are essential for interactive graphics and progress indicators. As an alternative, consider React Native, which offers cross-platform development with an active community and a vast library of components for building responsive and interactive interfaces.

For the backend and API, use Node.js with Express or NestJS (using TypeScript) to create robust REST or GraphQL APIs. This ensures fast responses and scalability, while TypeScript enhances code safety and maintainability. NestJS provides a modular structure that simplifies integration with external services and the implementation of the SM2 algorithm. Alternatively, you can use Python with FastAPI, which delivers excellent performance and simplicity for developing modern APIs and integrating business logic like SM2.

For the database and real-time integration, use Firebase Firestore, a NoSQL database ideal for real-time data synchronization, which is perfect for updating decks, tracking user progress, and managing dynamic app data. As an alternative, consider Firebase Realtime Database if a highly reactive data model with minimal latency is required.

For external integrations, use Firebase for the administrative management of decks, real-time data synchronization, and push notifications. Use the OpenAI API to dynamically generate personalized support phrases. Ensure that the backend makes secure, well-structured REST calls to guarantee agile and context-aware responses. Integrate the SM2 algorithm in the backend using either Node.js or Python to process flashcard difficulty ratings and update the database with terms requiring reinforcement.

For additional tools and technologies, use libraries such as PapaParse in JavaScript or equivalent Python modules for CSV validation and import to ensure data integrity during deck import. Employ Git for version control and implement CI/CD pipelines using tools like GitHub Actions or GitLab CI. Utilize Docker for containerization to facilitate backend deployment and scalability. Use testing frameworks like Jest for Node.js or PyTest for Python for unit and integration tests, and Flutter Test for frontend testing to ensure overall system robustness. Finally, integrate Firebase Analytics and Crashlytics to monitor performance, capture errors, and optimize the user experience.

Confirm that you have stored this information and will continue to communicate in Portuguese.
